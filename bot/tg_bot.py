import asyncio
import json
import logging
import sys
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session import aiohttp
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, Document, FSInputFile
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.lib import colors
import os
from datetime import datetime
import textwrap
import re

pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))  # –û–±—ã—á–Ω—ã–π
pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', 'DejaVuSans-Bold.ttf'))  # –ñ–∏—Ä–Ω—ã–π
pdfmetrics.registerFont(TTFont('DejaVuSans-Oblique', 'DejaVuSans-Oblique.ttf'))  # –ö—É—Ä—Å–∏–≤
pdfmetrics.registerFont(TTFont('DejaVuSansMono', 'DejaVuSansMono.ttf'))  # –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π (–∫–æ–¥)

PAGE_WIDTH, PAGE_HEIGHT = A4
MARGIN = 50
LINE_HEIGHT = 14
MAX_WIDTH = PAGE_WIDTH - 2 * MARGIN


def draw_markdown_text(c, text, x, y):
    """
    –†–∏—Å—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown:
    - **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
    - *–∫—É—Ä—Å–∏–≤*
    - `–∫–æ–¥`
    """
    lines = text.split('\n')
    for line in lines:
        y = draw_wrapped_markdown_line(c, line, x, y)
    return y


def draw_wrapped_markdown_line(c, text, x, y):
    wrapped_lines = textwrap.wrap(text, width=int(MAX_WIDTH // (7)))
    for line in wrapped_lines:
        if line.startswith('### '):
            c.setFont("DejaVuSans-Bold", 12)
            c.setFillColor(colors.darkblue)
            line = line[4:]
        elif line.startswith('## '):
            c.setFont("DejaVuSans-Bold", 14)
            line = line[3:]
        elif line.startswith('# '):
            c.setFont("DejaVuSans-Bold", 16)
            line = line[2:]
        elif '**' in line:
            c.setFont("DejaVuSans-Bold", 10)
            line = re.sub(r'\*\*(.*?)\*\*', r'\1', line)
        elif '*' in line:
            c.setFont("DejaVuSans-Oblique", 10)
            line = re.sub(r'\*(.*?)\*', r'\1', line)
        elif '`' in line:
            c.setFont("DejaVuSansMono", 10)
            c.setFillColor(colors.darkblue)
            line = line.replace('`', '')
        else:
            c.setFont("DejaVuSans", 10)
            c.setFillColor(colors.black)

        c.drawString(x, y, line)
        y -= LINE_HEIGHT
    return y


def create_review_pdf(data, file_path):
    """
    –°–æ–∑–¥–∞–µ—Ç PDF-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞.
    """
    c = canvas.Canvas(file_path, pagesize=A4)
    width, height = A4
    margin = 50

    project_name = os.path.basename(data['folder_path'])

    c.setFont("DejaVuSans-Bold", 16)
    c.drawString(margin, height - margin, f"# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
    c.setFont("DejaVuSans", 12)
    c.drawString(margin, height - margin - 20, f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")

    y_pos = height - margin - 60

    y_pos -= 20
    y_pos = draw_markdown_text(c, "## –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:", margin, y_pos)

    if isinstance(data['result'], dict):
        for result in data['result']['results']:
            if y_pos < margin + 100:
                c.showPage()
                y_pos = height - margin

            line_number = result.get('line_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            y_pos = draw_markdown_text(c, f"{result.get('error_class', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", margin,
                                       y_pos)

            y_pos = draw_markdown_text(c, f"**–§–∞–π–ª:** `{result.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')}`",
                                       margin, y_pos)
            y_pos = draw_markdown_text(c, f"**–õ–∏–Ω–∏—è:** `{line_number}`", margin, y_pos)

            y_pos = draw_markdown_text(c,
                                       f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**\n*{result.get('comment', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}*",
                                       margin, y_pos - 10)

            y_pos = draw_markdown_text(c,
                                       f"**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n```{result.get('fix', '')}```",
                                       margin, y_pos - 10)

            y_pos -= 20
    else:
        for result_d in data['result']:
            print(result_d, "Result_d")
            if result_d['results']:
                for result in result_d['results']:
                    print(result, "RESULT")
                    try:
                        if y_pos < margin + 100:
                            c.showPage()
                            y_pos = height - margin

                        line_number = result.get('line_number', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        y_pos = draw_markdown_text(c, f"{result.get('error_class', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", margin,
                                                   y_pos)

                        y_pos = draw_markdown_text(c, f"**–§–∞–π–ª:** `{result.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')}`",
                                                   margin, y_pos)
                        y_pos = draw_markdown_text(c, f"**–õ–∏–Ω–∏—è:** `{line_number}`", margin, y_pos)

                        y_pos = draw_markdown_text(c,
                                                   f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**\n*{result.get('comment', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}*",
                                                   margin, y_pos - 10)

                        y_pos = draw_markdown_text(c,
                                                   f"**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**\n```{result.get('fix', '')}```",
                                                   margin, y_pos - 10)

                        y_pos -= 20

                    except Exception as e:
                        continue

    c.save()


TOKEN = open("token.txt", "r").readline().strip()
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
user_states = {}

ZIP_DIR = "downloaded_files"
REVIEWS_DIR = "reviews"
os.makedirs(ZIP_DIR, exist_ok=True)


def main_kb(user_telegram_id: int) -> ReplyKeyboardMarkup:
    kb_list = [
        [KeyboardButton(text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"), KeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True)
    return keyboard


def unique_name(file_name):
    timestamp = datetime.now().strftime("%d-%m-%Y_%H-%M-%S")
    unique_file_name = f"{timestamp}_{file_name}"
    return unique_file_name


async def send_file_to_server(file_path):
    url = 'http://127.0.0.1:8000/get_review/'
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as f:
            async with session.post(url, data={'file': f}) as response:
                if response.status == 201:
                    data = await response.text()
                    return json.loads(data)
                else:
                    return None


async def send_file_to_add_doc(file_path):
    url = 'http://127.0.0.1:8000/add_doc/'
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as f:
            async with session.post(url, data={'file': f}) as response:
                if response.status == 201:
                    data = await response.text()
                    return json.loads(data)
                else:
                    return None


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.full_name}!",
        reply_markup=main_kb(message.from_user.id)
    )


@router.message(F.text == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def upload_file_prompt(message: Message):
    user_states[message.from_user.id] = "awaiting_file"
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Ñ–∞–π–ª")


@router.message(F.document)
async def save_file(message: Message):
    user_id = message.from_user.id

    if user_states.get(user_id) == "awaiting_doc":
        document: Document = message.document

        file = await bot.get_file(document.file_id)
        file_path = os.path.join(ZIP_DIR, unique_name(document.file_name))

        await bot.download_file(file.file_path, file_path)

        user_states.pop(user_id, None)

        try:
            response = await send_file_to_add_doc(file_path)

            if response:
                await message.answer("üìÑ –í–∞—à–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")
    else:
        if user_states.get(user_id) != "awaiting_file" and user_states.get(user_id) != "awaiting_doc":
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ 'üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç' –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞.")
            return

        document: Document = message.document

        file = await bot.get_file(document.file_id)
        file_path = os.path.join(ZIP_DIR, unique_name(document.file_name))

        await bot.download_file(file.file_path, file_path)

        user_states.pop(user_id, None)

        try:
            response = await send_file_to_server(file_path)

            if response:
                data = response

                pdf_file_path = os.path.join(ZIP_DIR, unique_name("review.pdf"))
                create_review_pdf(data, pdf_file_path)

                file_to_send = FSInputFile(pdf_file_path)
                await bot.send_document(message.chat.id, file_to_send,
                                        caption="üìÑ –í–∞—à–µ —Ä–µ–≤—å—é —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}")


@router.message(F.text == "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç")
async def get_review(message: Message):
    user_states[message.from_user.id] = "awaiting_doc"
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç")


@router.message()
async def echo_handler(message: Message) -> None:
    try:
        await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.answer("Nice try!")


async def main() -> None:
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
